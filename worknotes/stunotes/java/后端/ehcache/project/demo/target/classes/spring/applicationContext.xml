<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:cache="http://www.springframework.org/schema/cache"
	   xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	   					   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	   					   http://www.springframework.org/schema/context
	   					   http://www.springframework.org/schema/context/spring-context-3.0.xsd
	   					   http://www.springframework.org/schema/cache
     					   http://www.springframework.org/schema/cache/spring-cache-4.0.xsd
	   					   http://www.springframework.org/schema/tx 
	   					   http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
	<!-- spring模块：扫描基础包 -->
	<context:component-scan base-package="com.lhb" />
	
	<!-- spring模块：开启注解 实现spring控制反转  依赖注入  -->
	<context:annotation-config/>
	
	<!-- mybatis模块  -->
	<context:property-placeholder location="classpath:properties/jdbc.properties,classpath:properties/mail.properties" ignore-unresolvable="true"/>
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"   
        destroy-method="close">    
        <property name="driverClassName" value="${jdbc.driver}" />    
        <property name="url" value="${jdbc.url}" />    
        <property name="username" value="${jdbc.username}" />    
        <property name="password" value="${jdbc.password}" />    
    </bean>    
    
    <!-- sqlSessionFactory 配置mapper-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">    
        <property name="dataSource" ref="dataSource" />   
        <!-- 引入mybatis的配置文件  -->
        <property name="configLocation" value="classpath:spring/mybatis-config.xml"></property> 
        <!-- 自动扫描mapping.xml文件 -->    
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property> 
    </bean> 
	
	<!-- dao包扫描  -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">    
        <property name="basePackage" value="com.lhb.dao" />    
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>    
    </bean> 
    
    <!-- 配置声明式事务  注解方式 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    	<property name="dataSource" ref="dataSource"></property>
    </bean>
    <!-- 此配置 是的注解式事务在service层生效  controller层的事务注解需要使用的话  需要在springmvc配置文件中开启事务注解  即可在controller可以使用注解  -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
    
    <!-- 启动spring自带缓存功能  mybatis与spring集成后由于托管机制导致mybaits的一级缓存失效【mybaits的一级缓存是针对于同一个sqlsession的，但是spring的托管后针对于数据库的时候是申请打开处理完后直接关闭，故导致mybatis的一级缓存失控】  -->
   	<cache:annotation-driven cache-manager="cacheManager"/>
    <bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
    	<property name="caches">
    		<set>
    			<bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"  name="default"></bean>
    			<!-- <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"  name="student"></bean> -->
    			<!-- 使用P:name 这种格式设置属性时  需要引入p的命名空间 -->
    			<bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"  p:name="student"></bean>
    		</set>
    	</property>
    </bean>
    
    <!-- 邮件配置 只能存在一个标签context:property-placeholder 故mail配置文件的配置与jdbc配置文件放在一个标签类读取  分开放时  会提示对应的配置文件key无法读取到-->
	<!-- <context:property-placeholder location="classpath:properties/mail.properties" ignore-unresolvable="true"/> -->
	<!--配置邮件接口-->
	<bean id="javaMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
	     <property name="host" value="${mail.smtp.host}"/>
	     <property name="username" value="${mail.smtp.username}"/>
	     <property name="password" value="${mail.smtp.password}"/>
	     <property name="defaultEncoding" value="${mail.smtp.defaultEncoding}"/>
	     <property name="javaMailProperties">
	         <props>
	             <prop key="mail.smtp.auth">${mail.smtp.auth}</prop>
	             <prop key="mail.smtp.timeout">${mail.smtp.timeout}</prop>
	         </props>
	     </property>
	</bean>
</beans>