http://www.cnblogs.com/shuaifing/p/9188436.html

1、概念
	纯java的缓存框架，将指定数据存放在内存或者磁盘中，提高数据的使用效率。
2、关键元素
	cacheManager:cache的容器对象 并管理cache的生命周期
	cache:单个缓存对象，是ehcache的核心类。它有多个element，并被cacheManager管理。
	element:缓存元素，维护着一队键值对
3、使用步骤：
	【使用方式有两种：通过xml的配置方式，一种是直接以接口的方式使用new的方式去创建】
	1》maven引入依赖
		<dependency>
			<groupId>net.sf.ehcache</groupId>
			<artifactId>ehcache</artifactId>
			<version>2.10.3</version>
		</dependency>
		
	2》配置ehcache.xml
		案例：
		ehcache.xml配置参数说明：
			name：缓存名称。
			maxElementsInMemory：缓存最大个数。
			eternal：缓存中对象是否为永久的，如果是，超时设置将被忽略，对象从不过期。
			timeToIdleSeconds：置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。
			timeToLiveSeconds：缓存数据的生存时间（TTL），也就是一个元素从构建到消亡的最大时间间隔值，这只能在元素不是永久驻留时有效，如果该值是0就意味着元素可以停顿无穷长的时间。
			maxEntriesLocalDisk：当内存中对象数量达到maxElementsInMemory时，Ehcache将会对象写到磁盘中。
			overflowToDisk：内存不足时，是否启用磁盘缓存。
			diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。
			maxElementsOnDisk：硬盘最大缓存个数。
			diskPersistent：是否在VM重启时存储硬盘的缓存数据。默认值是false。
			diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。
			memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。
			clearOnFlush：内存数量最大时是否清除。
		
	3》若使用spring则在sprig容器中进行cache对象的托管，若没有使用spring则直接主动使用new 创建对象即可。
	
	案例：
	public  static  void main(String[] args){
       // Create a cache manager 创建缓存管理者
       final CacheManager cacheManager=new CacheManager(); 
        // create the cache called "helloworld"  引用ehcache.xml申明的的名为helloworld的缓存创建Cache对象
       final Cache cache=cacheManager.getCache("helloworld");
       // create a key to map the data to
      final String key="greeting";
      // Create a data element   
      final Element putGreeting=new Element(key,"Hello,World!");
      // Put the element into the data store  //将map对象放到cache缓存里
      cache.put(putGreeting);
      // Retrieve the data element  //从cache对象中获得到元素
      final  Element getGreeting=cache.get(key); 
     // Retrieve the data element
      System.out.println(getGreeting.getObjectValue());
    }
	
4、spring与ehcache 
	spring已经封住了cacheManager类，故使用如下：
		<?xml version="1.0" encoding="UTF-8"?>
		<beans xmlns="http://www.springframework.org/schema/beans"
			   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			   xmlns:cache="http://www.springframework.org/schema/cache"
			   xsi:schemaLocation="http://www.springframework.org/schema/beans
				http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
				http://www.springframework.org/schema/cache
				http://www.springframework.org/schema/cache/spring-cache-3.2.xsd">

		  <description>ehcache缓存配置管理文件</description>

		  <bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
			<property name="configLocation" value="classpath:ehcache/ehcache.xml"/>
		  </bean>

		  <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
			<property name="cacheManager" ref="ehcache"/>
		  </bean>

		  <!-- 启用缓存注解开关 -->
		  <cache:annotation-driven cache-manager="cacheManager"/>
		</beans>
	解析：1、通过spring的ehcacheManager得到ehcahe并指定ehcache.xml的文件位置
		  2、通过ehcache管理器得到cacheManager
		  3、开通缓存的注解功能<cache:annotation-driven cache-manager="cacheManager"/>。或通过给类添加注解（@EnableCaching）的方式，标注该类支持使用ehcache。
		  https://www.cnblogs.com/jingmoxukong/p/5975994.html
		  
			缓存的注解：
						方法级别注解：	@Cacheable：含义：表示当第一次调用该方法时将调用保存在缓存中，在缓存的有效期内，再次调用该方法是不再执行方法体的内容而是直接读取缓存内容。
													设置：@Cacheable（{“user”,"Users"}可以设置多个缓存。@Cacheable(value="user",condition="#user.getId() <= 2",key="#user.getId()"),其中value表示缓存的名称【即在ehcache.xml使用cache标签配置过的缓存名称】，condition为数据是否被缓存的条件，key是缓存中element对象的key的生成规则。需要注意的是：condition中使用返回值对象时要以#开头，其对象要与接口参数名保持一致。
										
												value：缓存位置名称，不能为空，如果使用EHCache，就是ehcache.xml中声明的cache的name, 指明将值缓存到哪个Cache中
												key：缓存的key，默认为空，既表示使用方法的参数类型及参数值作为key，支持SpEL，如果要引用参数值使用井号加参数名，如：#userId，

										@CachePut：其含义于@Cacheable一致，主要区别为：不仅缓存方法结果，还会继续执行方法体。
										@CacheEvict：含义：删除不用的缓存
													 设置：@CacheEvict(value = "users", allEntries = true)
													 
													value：缓存位置名称，不能为空，同上
													key：缓存的key，默认为空，同上
													condition：触发条件，只有满足条件的情况才会清除缓存，默认为空，支持SpEL
													allEntries：true表示清除value中的全部缓存，默认为false
										@Caching：含义：合并多个缓存策略
												  设置：@Caching(evict = { @CacheEvict("primary"), @CacheEvict(cacheNames="secondary", key="#p0") })
										
						类界别注解：	@CacheConfig：含义：如果类的所有操作都是缓存操作，你可以使用@CacheConfig来指定类，省去一些配置。
													  设置：@CacheConfig("books")
															public class BookRepositoryImpl implements BookRepository {
																@Cacheable
																public Book findBook(ISBN isbn) {...}
															}

5、ehcache.xml解析
	常用参数：
		<diskStore>：当内存缓存的对象超过maxElementInMemory时，将缓存的对象写到磁盘缓存中（需对象实现序列化接口）
		<diskStore path="">：path为磁盘的物理路径，ehcache磁盘缓存使用的文件后缀名是：*.data和*.index 
		name：缓存名称
		maxElementsInMemory:缓存最大元素个数
		eternal：该对象是否持久化，若持久化后则timeOut配置将不起作用（必填属性）
		maxEntriesLocalHeap="1000":堆内存中最大缓存对象数，0表示没有限制（必填）
		maxEntriesLocalDisk="1000":硬盘中最大缓存个数
		overflowToDisk="true":当缓存达到maxElementsInMemeory值时，是否允许溢出到磁盘（必填）
		diskPersistent="false":磁盘缓存在虚拟机重启时是否保持
		timeToIdleSeconds="10000":当元素闲置指定时间后销毁元素，当eternal为true该属性不生效。默认值为0,0表示永远空闲。
		timeToLiveSeconds="3000"：当缓存元素存活多久后销毁元素，0表示永远存在不过期
		memoryStoreEvictionPolicy="LFU":当达到maxElementsInMemory时，如何强制进行驱逐默认使用最近使用（LRU）策略。其它还有先入先出FIFO,最少使用LFU,较少使用LRU
		diskExpiryThreadIntervalSeconds ：磁盘失效线程运行时间间隔，默认是120秒。
		clearOnFlush   : 内存数量最大时是否清除。